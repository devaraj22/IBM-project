version: '3.8'

services:
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app/data:/app/data
      - ./backend/app/logs:/app/logs
    environment:
      - DATABASE_URL=sqlite:///./data/medical_ai.db
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - LOG_LEVEL=INFO
    networks:
      - medical-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    depends_on:
      - api
    environment:
      - API_BASE_URL=http://api:8000/api
    networks:
      - medical-ai-network
    restart: unless-stopped
    volumes:
      - ./frontend/data:/app/data

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=medical_ai
      - POSTGRES_USER=medical_user
      - POSTGRES_PASSWORD=medical_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - medical-ai-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - medical-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

networks:
  medical-ai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: